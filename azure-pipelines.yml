# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
#- master
- CreateContainerImage

variables:
  ResourceGroupName: 'SonarQube-rg'
  ContainerRegistryName: 'chcontainerregistrymain'

stages:
  - stage: Build
    jobs:
    - job: 'BuildSonarQubeTerraformFiles'

      pool:
        vmImage: 'ubuntu-latest'

      steps:
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/Terraform/SonarQube'
          ArtifactName: 'SonarQubeCore'
          publishLocation: 'Container'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/Terraform/ContainerRegistry'
          ArtifactName: 'ContainerRegistry'
          publishLocation: 'Container'

  - stage: DeployResourceGroup
    dependsOn: Build
    condition: succeeded()

    jobs:
    - job: 'DeployContainerRegistry'

      pool:
        vmImage: 'ubuntu-latest'

      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'ContainerRegistry'
          downloadPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Download Azure ResourceGroup Artifact'

      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'SonarQubeCore'
          downloadPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Download Sonarqube Artifact'

      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.12.20'
        displayName: 'Install Terraform'

      - task: TerraformTaskV1@0
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/ContainerRegistry'
          backendServiceArm: 'MSDN'
          backendAzureRmResourceGroupName: 'tfstate'
          backendAzureRmStorageAccountName: 'chsonarquberesourcegroup'
          backendAzureRmContainerName: 'terraform-state'
          backendAzureRmKey: 'terraform.tfstate'
        displayName: 'Terrafom Init'

      - task: TerraformTaskV1@0
        inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/ContainerRegistry'
            commandOptions: "-out main.tfplan -var=containerRegistryName=$(ContainerRegistryName)"
            environmentServiceNameAzureRM: 'MSDN'
        displayName: 'Terraform Plan'

      - task: TerraformTaskV1@0
        inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/ContainerRegistry'
            commandOptions: 'main.tfplan'
            environmentServiceNameAzureRM: 'MSDN'
        displayName: 'Terraform Apply'

      - task: Docker@2
        displayName: 'Login to Docker Hub'
        inputs:
          command: login
          containerRegistry: DockerHub

      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: AzureContainerRegistry

      - task: Docker@2
        displayName: 'Push image to azure acr'
        inputs:
          command: buildAndPush
          Dockerfile: '$(System.DefaultWorkingDirectory)/SonarQubeCore/Dockerfile'
          repository: AzureContainerRegistry
          tags: |
            '$(ContainerRegistryName).azurecr.io/sonarqube:$(Build.BuildId)'